ddd
ddd=dpois( 10, 3.14)*100
ddd
ddd=dpois( 0:20, 3.14)*100
ddd
ddd=dpois( 0:9, 3.14)*100
ddd
table(dpois( 0:8, 3.14)*100)
mean(ddd)
a = sqrt(2)
x = a*1:500
x = x - floor(x)
a
x
a = sqrt(2)
a
x = a*1:500
x
x = x - floor(x)
x
floor
x=5.1
x = x - floor(x)
x
floor(x)
hist(x, pr=TRUE, col="gold")        #Гистограмма
x = a*1:500
x
x = x - floor(x)
x
hist(x, pr=TRUE, col="gold")        #Гистограмма
curve( dunif(x), add=TRUE)          #Кривая
(x[n-1],x[n])
# (x[n-1],x[n])
plot( x[-500], x[-1])
x[-1]
x[-500]
u = runif(1000)
# F(t)=P(X<t)
binom
# F(t)=P(X<t)
rbinom
u = runif(1000)
x = sqrt(u)
hist(x, pr=TRUE, col="gray")
curve( 2*x, add=TRUE)
u
runif
x
mean( runif(100)^5 )
mean( runif(100)^0.2/5)
mean( runif(100)^5 )
mean( runif(100)^0.2/5)
mean( runif(100)^5 )
mean( runif(100)^0.2/5)
u=runif(100)
u
hist(u, pr=TRUE, col='gold')
u=runif(1000)
u
hist(u, pr=TRUE, col='gold')
u=runif(100)^5
u
hist(u, pr=TRUE, col='gold')
mean( runif(100)^5 )
mean( runif(100)^0.2/5)
mean( replicate( 100, max(runif(5))/5) )
replicate
ddd=replicate( runif(100)^0.2/5)
ddd <- replicate( runif(100)^0.2/5))
ddd <- replicate( runif(100)^0.2/5)
ddd <- replicate(100, runif(100)^0.2/5)
ddd
u=runif(100)^5
u
mean( u )
hist(u, pr=TRUE, col='gold')
u <- runif(100)^0.2/5)
u <- runif(100)^5
u
mean( u )
u <- runif(100)^0.2/5
u
u <- runif(100)^0.2/5
u
hist(u, pr=TRUE, col="gray")
u <- runif(100)^0.2/5
u
hist(u, pr=TRUE, col="gray")
mean( u )
mean( replicate( 100, max(runif(5))/5) )
mean( replicate( 100, max(runif(5))/5) )
u<-( replicate( 100, max(runif(5))/5) )
u
hist(u, pr=TRUE, col="gray")
u<-( replicate( 100, max(runif(5))/5) )
u
hist(u, pr=TRUE, col="gray")
u<-( replicate( 100, max(runif(5))/5) )
hist(u, pr=TRUE, col="gray")
u <- runif(100)^0.2/5
hist(u, pr=TRUE, col="gray")
I1 = replicate( 1000,  mean( runif(100)^5 ))
I2 = replicate( 1000,  mean( runif(100)^0.2/5 ))
par(mfrow=c(2,1))
hist(I1, pr=TRUE, col="gray", xlim=c(0.07, 0.26))
abline(v=1/6, col="red", lwd=2)
curve( dnorm(x, 1/6, sqrt( (1/11-(1/6)^2)/100)), add=TRUE, lwd=1.2, col="red")
hist(I2, pr=TRUE, col="gray", xlim=c(0.07, 0.26))
abline(v=1/6, col="red", lwd=2)
gamma=0.95
zq = qnorm( (1+gamma)/2 )
I1[1]+ c( -zq, zq)*sqrt( (1/11-(1/6)^2)/100)
integrate( function(x) x^5, 0, 1)
c
a<-rbinom(10,10,0.2)
mean(a)
a
table(a)
a
rep(c(0,1,2,3),c(1,3,4,2))->a.fake
mean(a.fake)
a.fake
mean( x^0.2
x <- runif(100)
mean( x^0.2)
mean( x^0.2)
x
mean( x^0.2)
mean( x^0.2/5)
x <- runif(100)
x
mean(x)
mean( x^0.2/5)
mean(x)
mean( x^0.2/5)
mean(x)
mean( x^0.2/5)
x <- runif(100)
mean(x)
mean( x^0.2/5)
mean( x^0.25/5)
dunif
pnorm
x<- replicate(100, sum(runif(12)) - 6)
x
x<- replicate(100,runif(12))
x
x<- replicate(3,runif(12))
x
x<- replicate( 4,  mean( runif(20) ))
x
rep
?rep
rep(c(0,1,2,3),c(1,3,4,2))->a.fake  #Восстанавливаем выборку по группирован. данным
mean(a.fake)
a.fake
rep(c(0,1,2,3),c(1,3,4,2))
a
a.fake
x <- rnorm( 100, 1, 0.5)
x.ecdf <- ecdf(x)
x.ecdf(0)
curve( x.ecdf, -2, 6)
plot( x.ecdf )
girth.ecdf <- ecdf(trees$Girth)
plot( girth.ecdf )
girth.ecdf(16)-girth.ecdf(14)
diff( girth.ecdf(c(14, 16)) )
# сходимость
y <- rexp(10000)
curve(pexp(x), xlim=c(-0.5, 6.5), col="red")
plot(ecdf(y[1:50]), add=TRUE, col="gray")
plot(ecdf(y[1:250]), add=TRUE, col="lightblue")
plot(ecdf(y[1:1000]), add=TRUE, col="brown")
plot(ecdf(y), add=TRUE, col="green")
attach(trees)
hist(Girth, pr=TRUE, col="gray")
lines( density(Girth), col="blue")
lines( density(Girth, kernel="rectangular"), col="brown")
detach(trees)
x<- rnorm(1000)
ks.test(x,"norm")
ks.test(x,"pnorm")
hist(x)
x<- rnorm(10000, 6, 3)
hist(x)
ks.test(x,"pnorm")
ks.test(x,"pnorm", min=-5)
ks.test(x,"pnorm", 6,3)
x<- rnorm(10000, 6, 3)
hist(x)
ks.test(x,"pnorm", 6,3)
x<- rnorm(10000, 6, 3)
hist(x)
ks.test(x,"pnorm", 6,3)
x<- rnorm(10000, 6, 3)
hist(x)
ks.test(x,"pnorm", 6,3)
x<- rnorm(10000, 10, 3)
hist(x)
ks.test(x,"pnorm", 6,3)
ks.test(x,"pnorm", 10,3)
ks.test(x,"pnorm", 10,5)
x<- rnorm(10000, 10, 5)
hist(x)
ks.test(x,"pnorm", 10,5)
curve(x)
rpois(1000, 7)
table( rpois(1000, 7) )
ddd=dpois( 0:9, 3.14)*100
ddd
table(dpois( 0:8, 3.14)*100)
mean(ddd)
a<-rbinom(10,10,0.2)
mean(a)
a
table(a)
a
rep(c(0,1,2,3),c(1,3,4,2))->a.fake  #Восстанавливаем выборку по группирован. данным
mean(a.fake)
a.fake
x=5.1
floor(x)                            #Взять целую часть
a = sqrt(2)
a
x = a*1:500
x
x = x - floor(x)
x
hist(x, pr=TRUE, col="gold")        #Гистограмма
curve( dunif(x), add=TRUE)          #Кривая
curve(dnorm(x))
x<- rnorm(10000, 10, 5)
hist(x)
curve(dnorm(x), add=TRUE)
par(mfrow=c(2,1))
hist(I1, pr=TRUE, col="gray", xlim=c(0.07, 0.26))
abline(v=1/6, col="red", lwd=2)
curve( dnorm(x, 1/6, sqrt( (1/11-(1/6)^2)/100)), add=TRUE, lwd=1.2, col="red")
curve(dnorm(x), 10,5, add=TRUE)
x<- rnorm(10000, 10, 5)
hist(x)
curve(dnorm(x), 10,5, add=TRUE)
ks.test(x,"pnorm", 10,5)
x<- rnorm(10000)
hist(x)
curve(dnorm(x),  add=TRUE)
ks.test(x,"pnorm")
I1 = replicate( 1000,  mean( runif(100)^5 ))          #Создать 1000 выборок по 100 эл.
I2 = replicate( 1000,  mean( runif(100)^0.2/5 ))
par(mfrow=c(2,1))
?par
hist(I1, pr=TRUE, col="gray", xlim=c(0.07, 0.26))
abline(v=1/6, col="red", lwd=2)
?hist
par(mfrow=c(2,1))
hist(I1, pr=TRUE, col="gray", xlim=c(0.07, 0.26)
curve( dnorm(x, 1/6, sqrt( (1/11-(1/6)^2)/100)), add=TRUE, lwd=1.2, col="red")
hist(I2, pr=TRUE, col="gray", xlim=c(0.07, 0.26))
abline(v=1/6, col="red", lwd=2)
par(mfrow=c(2,1))
hist(I1, pr=TRUE, col="gray", xlim=c(0.07, 0.26))
abline(v=1/6, col="red", lwd=2)
par(mfrow=c(2,1))
hist(I1, col="gray", xlim=c(0.07, 0.26))
abline(v=1/6, col="red", lwd=2)
par(mfrow=c(2,1))
hist(I1, pr=TRUE, col="gray", xlim=c(0.07, 0.26))
abline(v=1/6, col="red")
abline(v=1/6, col="red", lwd=2)
curve( dnorm(x, 1/6, sqrt( (1/11-(1/6)^2)/100)), add=TRUE, lwd=1.2, col="red")
x<- rnorm(10000, 10,3)
hist(x)
curve(dnorm(x,10,3), col='red'  add=TRUE)
curve(dnorm(x,10,3), col='red' , add=TRUE)
hist(x, pr-TRUE)
x<- rnorm(10000, 10,3)
hist(x, pr=TRUE)
curve(dnorm(x,10,3), col='red' , add=TRUE)
ks.test(x,"pnorm")
ks.test(x,"pnorm", 10, 3)
x <- rnorm( 100, 1, 0.5)
x.ecdf <- ecdf(x)
x.ecdf(0)
curve( x.ecdf, -2, 6)
plot( x.ecdf )
girth.ecdf <- ecdf(trees$Girth)
plot( girth.ecdf )
girth.ecdf(16)-girth.ecdf(14)
diff( girth.ecdf(c(14, 16)) )
# сходимость
y <- rexp(10000)
curve(pexp(x), xlim=c(-0.5, 6.5), col="red")
plot(ecdf(y[1:50]), add=TRUE, col="gray")
plot(ecdf(y[1:250]), add=TRUE, col="lightblue")
plot(ecdf(y[1:1000]), add=TRUE, col="brown")
plot(ecdf(y), add=TRUE, col="green")
attach(iris)
plot(density(Sepal.Width))
mean( Sepal.Width )
mean( Sepal.Width, trim = 0.1 )
median( Sepal.Width )
abline( v=mean(Sepal.Width) )
abline( v=median(Sepal.Width), col="red" )
var(Sepal.Width)
sd(Sepal.Width)
IQR(Sepal.Width)
3.06+3*c(-0.44, 0.44)
diff( ecdf(Sepal.Width)(c(3.06+3*c(-0.44, 0.44))))
summary( Sepal.Width )
boxplot( Sepal.Width )
attach(trees)
hist(Girth, pr=TRUE, col="gray")
lines( density(Girth), col="blue")
lines( density(Girth, kernel="rectangular"), col="brown")
x <- rcauchy(10000)
hist(x, pr=TRUE, col="gold", br=30)
curve(dcauchy, add=TRUE, col="red", lwd=2)
range(x)
curve(dcauchy, -10, 10, col="red", lwd=2)
xm <- replicate(1000, mean( rcauchy(10) ))
hist(xm, pr=TRUE)
range(xm)
attach(iris)
plot(density(Sepal.Width))
mean( Sepal.Width )
mean( Sepal.Width, trim = 0.1 )
median( Sepal.Width )
abline( v=mean(Sepal.Width) )
abline( v=median(Sepal.Width), col="red" )
var(Sepal.Width)
sd(Sepal.Width)
IQR(Sepal.Width)
3.06+3*c(-0.44, 0.44)
diff( ecdf(Sepal.Width)(c(3.06+3*c(-0.44, 0.44))))
library(EnvStats)
rbind( sd=lapply(iris[1:4], sd),
sk=lapply(iris[1:4], skewness))
with(iris, summary( iris[ Species=='setosa',   ]))
with(iris, lapply( iris[ Species=='setosa', ], kurtosis))
iris.setosa <- subset(iris, subset= (Species=='setosa'),
select=c(Sepal.Width, Sepal.Length, Petal.Width, Petal.Length) )
lapply( iris.setosa, mean)
with(iris, tapply(Sepal.Width, Species, mean))
aggregate(iris[1:4], by=list(iris$Species), mean)
x.t <- table( rpois(100, lambda=5) )
rep( c(1:8, 10, 12) ,  x.t)
names(x.t)
mean( rep( as.integer( names(x.t)),  x.t) )
mean( rep( names(x.t),  x.t) )
x.h <- hist(iris$Sepal.Width, pr=TRUE)
#Выборочные хар-ки: ______________________
attach(iris)
plot(density(Sepal.Width))
mean( Sepal.Width )
mean( Sepal.Width, trim = 0.1 )
median( Sepal.Width )
abline( v=mean(Sepal.Width) )
abline( v=median(Sepal.Width), col="red" )
var(Sepal.Width)
sd(Sepal.Width)
IQR(Sepal.Width)
3.06+3*c(-0.44, 0.44)
3*c(-0.44, 0.44)
3.06+3*c(-0.44, 0.44)
diff( ecdf(Sepal.Width)(c(3.06+3*c(-0.44, 0.44))))
ecdf(Sepal.Width)(c(3.06+3*c(-0.44, 0.44)))
diff(3.06+3*c(-0.44, 0.44))
summary( Sepal.Width )
boxplot( Sepal.Width )
plot(density(Sepal.Width))
library(EnvStats)
rbind( sd=lapply(iris[1:4], sd),
sk=lapply(iris[1:4], skewness))
with(iris, summary( iris[ Species=='setosa',   ]))
with(iris, lapply( iris[ Species=='setosa', ], kurtosis))
iris.setosa <- subset(iris, subset= (Species=='setosa'),
select=c(Sepal.Width, Sepal.Length, Petal.Width, Petal.Length) )
lapply( iris.setosa, mean)
?lapply
with(iris, tapply(Sepal.Width, Species, mean))
aggregate(iris[1:4], by=list(iris$Species), mean)
x.t <- table( rpois(100, lambda=5) )
rep( c(1:8, 10, 12) ,  x.t)
x.t
rep( c(1:8, 10, 12, 1) ,  x.t)
rep( c(1:8, 10, 12, 100) ,  x.t)
mean( rep( as.integer( names(x.t)),  x.t) )
mean( rep( names(x.t),  x.t) )
x.h <- hist(iris$Sepal.Width, pr=TRUE)
str(x.h)
x.mids <- x.h$breaks[-length(x.h$breaks)] + 0.5*diff(x.h$breaks)
x.fake<-rep( x.mids, x.h$counts)
mean(x.fake)
mean(iris$Sepal.Width)
sd(x.fake)
sd(iris$Sepal.Width)
x.fr <- x.h$counts
x.fake <- numeric(sum(x.fr))
j <- 1
for(i in 1:length(x.fr) ){
#  print(c(j, j+x.fr[i]-1))
x.fake[j:(j+x.fr[i]-1)] <- runif(x.fr[i], x.h$breaks[i], x.h$breaks[i+1])
j <- j + x.fr[i]
}
mean(x.fake)
sd(x.fake)
boxplot( Sepal.Width ~ Species, horizontal=TRUE, data=iris)
for( i in 1:20) {
x <- runif(100)
#plot(ecdf(x))
#curve( punif(x), add=TRUE, col="blue")
print(ks.test(x, punif)$p.value )
}
x <- replicate( 1000, sum(runif(12))-6)
hist(x, pr=TRUE, col="gray", br=150)
sum(runif(12)-6)
runif(12)-6
curve( dnorm(x), add=TRUE, col="blue"  )
ks.test( x, pnorm)
table( cut( x, br=c(-Inf, -2, 2, Inf)))/1000000
pnorm(-2)
1-pnorm(2)
x <- replicate( 1000, sum(runif(4))-2)
ks.test(x, pnorm, sd=sqrt(1/3))
chisq.test( c(2048, 1992), p=c(0.5, 0.5))
x <- replicate( 1000, sum(runif(4))-2)
func.hist
library("MASS")
func.exp <- function() {
exp.params <- fitdistr(trees$Height, "exponential")$estimate #Вычисляем оценку для мат. ожид и дисперсии для Height
#Estimate даёт сами значения, но есть еще и отклонения (в скобочках) - ошибки при вычислении
xvals <- seq(60,90,.5) #значения по x для trees$Height
hist(trees$Height,probability=TRUE,col="grey",main="")
lines(xvals, dexp(xvals, rate=exp.params[1]))
}
func.
exp
func.exp
?fitdistr
?qnorm
x<- rnorm(10000, 10,3)
hist(x, pr=TRUE)
curve(dnorm(x,10,3), col='red' , add=TRUE)
ks.test(x,"pnorm", 10, 3)
?qnorm
?qnorm(x,0.1)
qnorm(x,0.1)
qnorm(x,0.1)
q(x,0.1)
qnorm(0.1)
qnorm(0.1,x)
curve(f, 0, 1 - gm)
gm <- 0.9
f <- function(a) {
qnorm(gm + a, 0, 1) – qnorm(a, 0, 1)
}
gm <- 0.9
f <- function(a) {
qnorm(gm + a, 0, 1)-qnorm(a, 0, 1)
}
curve(f, 0, 1 - gm)
?qnorm
qnorm(c(0.33,0.66),0,1)
curve(qnorm(c(0.33,0.66),0,1))
curve(qnorm(c(0.33,0.66),0,1),0,1-0.33)
qnorm(c(0.33,0.66),0,1)
curve(f, 0, 1 - gm)
x<-pnorm(0,1)
qnorm(c(0.33,0.66),0,1)
curve(x,qnorm)
curve(x,qnorm(0.33),qnorm(1-0.33))
x<-pnorm(0,1)
br<-qnorm(c(0.33,0.66),0,1)
curve(x,qnorm(0.33),qnorm(1-0.33))
x
x<-pnorm(100,0,1)
x
?pnorm
rx<-rnorm(1000,0,1)
x<-pnorm(rx)
x
curve(x,qnorm(0.33),qnorm(1-0.33))
plot(x,qnorm(0.33),qnorm(1-0.33))
curve(pnorm(x),qnorm(0.33),qnorm(1-0.33))
curve(pnorm(rx),qnorm(0.33),qnorm(1-0.33))
rx<-rnorm(1000,0,1)
curve(pnorm(rx),qnorm(0.33),qnorm(1-0.33))
curve(dnorm(rx),qnorm(0.33),qnorm(1-0.33))
curve(pnorm(x),qnorm(0.33),qnorm(1-0.33))
curve(pnorm(rx,0,1),qnorm(0.33),qnorm(1-0.33))
curve(density(rx),qnorm(0.33),qnorm(1-0.33))
x<-density(rx)
x
curve(x)
plot(x)
plot(density(rx),qnorm(0.33),qnorm(1-0.33))
?plot
plot(density(rx),xlim=(qnorm(0.33),qnorm(1-0.33)))
plot(density(rx),(qnorm(0.33),qnorm(1-0.33)))
plot(density(rx),xlim=c(qnorm(0.33),qnorm(1-0.33)))
plot(x)
qqnorm(iris$Sepal.Width)
qqline(iris$Sepal.Width)
?lm
cost = data.frame(x = c(1, 2, 3, 5, 10, 20, 30, 50, 100, 200), y = c(10.15, 5.52, 4.08, 2.85, 2.11,
1.62, 1.41, 1.30, 1.21, 1.15)); # кадр данных
w = lm(y ~ x, cost)
plot(cost$x, cost$y)
abline(cost.lm, col="blue")
?outer
